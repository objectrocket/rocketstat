#!/usr/bin/env python

import argparse
import datetime
import json
import signal
import sys
import time
import urllib
import urllib2


class RocketStat:
    """RocketStat Utility Class"""
    
    def __init__(self, api_key, api_server, check_interval):

        self.api_key = api_key
        self.api_server = api_server
        self.sleep_interval = check_interval
        
    def printAPIError(self, errmsg):
        print '\nThe API couldn\'t fulfill the request. Please contact \'support@objectrocket.com\' for assistance.'
        print 'Error code: ', errmsg
        sys.exit(1)

    def thetime(self):
        return datetime.datetime.now().strftime("%d-%m-%Y.%H:%M:%S")

    def get_version(self, version_string):
        _version_list = version_string.split(".")
        return float(".".join([_version_list[0], _version_list[1]]))

    def printStats(self):
        data = []
        queries = 0
        inserts = 0
        updates = 0
        deletes = 0
        counter = 0
        connections = 0
        lock_percent = 0
        index_accesses = 0
        index_hits = 0
        index_misses = 0
        uptime_millis = 0
        locktime = 0 
        memory_misses = 0 

        # just run forever until ctrl-c
        while True:
            # set previous values before overwriting, only for things that are counters
            prior_queries = queries
            prior_inserts = inserts
            prior_updates = updates
            prior_deletes = deletes
            prior_index_accesses = index_accesses
            prior_index_hits = index_hits
            prior_index_misses = index_misses
            prior_uptime_millis = uptime_millis
            prior_locktime = locktime
            prior_memory_misses = memory_misses
            
            api_key = urllib.urlencode({'api_key': self.api_key})
            url = "https://{}/serverStatus".format(self.api_server)
            user_agent = "Rocketstat/1.0"
            headers = {'User-Agent': user_agent}
            request = urllib2.Request(url, api_key, headers)
            # Handle urllib2 errors (wrong URL, unable to connect, etc)
            try: 
                response = urllib2.urlopen(request)
            except urllib2.URLError as e:
                if hasattr(e, 'reason'):
                    self.printAPIError('Unable to reach ObjectRocket API')
                elif hasattr(e, 'code'):
                    self.printAPIError(e.code)
                else:
                    self.printAPIError('Unknown connection error')
            # Handle API response errors (API error or malformed response)
            resp_data = response.read()
            try:
                resp_json = json.loads(resp_data)
            except ValueError:
                self.printAPIError(resp_data)
 
            if 'rc' in resp_json.keys() and resp_json['rc'] == 1:
                self.printAPIError(resp_json['data'])
            else:
                data = resp_json['data']
                if not isinstance(data, dict) or 'instance' not in data.keys():
                    self.printAPIError('Malformed response')
                    
            instance = data["instance"]
            zone = data["zone"]
            version = self.get_version(data["version"])

            queries = int(data['opcounters']['query'])
            inserts = int(data['opcounters']['insert'])
            updates = int(data['opcounters']['update'])
            deletes = int(data['opcounters']['delete'])
            
            connections = int(data['connections']['current'])

            lock_total = data['globalLock']['currentQueue']['total']
            lock_readers = data['globalLock']['currentQueue']['readers']
            lock_writers = data['globalLock']['currentQueue']['writers']
            lock_active_total = data['globalLock']['activeClients']['total']
            lock_active_readers = data['globalLock']['activeClients']['readers']
            lock_active_writers = data['globalLock']['activeClients']['writers']
            
            ## fix silly versioning bug
            if data['version'] >= 2.2:
                locktime = int(data['globalLock']['lockTime'])
                uptime_millis = int(data['uptimeMillis'])
                diff_locktime =  locktime - prior_locktime
                diff_uptime_millis = uptime_millis - prior_uptime_millis
                lock_percent = round(float(diff_locktime) / float(diff_uptime_millis) ,1)
            else:
                ## if we're here, assume we're 2.0
                lock_percent = round(float(data['globalLock']['ratio']),2)
            
            memory_misses = int(0)
            for db in data['recordStats']:
                if db not in ['accessesNotInMemory','pageFaultExceptionsThrown']:
                    memory_misses += int(data['recordStats'][db]['accessesNotInMemory'])
            diff_memory_misses = (memory_misses - prior_memory_misses )

            if version >= 2.4:
                index_accesses = int(data['indexCounters']['accesses'])
                index_hits = int(data['indexCounters']['hits'])
                index_misses = int(data['indexCounters']['misses'])
                index_miss_percent = round(float(data['indexCounters']['missRatio']),2)
            else:
                index_accesses = int(data['indexCounters']['btree']['accesses'])
                index_hits = int(data['indexCounters']['btree']['hits'])
                index_misses = int(data['indexCounters']['btree']['misses'])
                index_miss_percent = round(float(data['indexCounters']['btree']['missRatio']),2)

            template = """{:>20}{:>13}{:>22}{:>10}{:>10}{:>10}{:>10}{:>10}{:>12}{:>10}{:>10}{:>10}{:>10}{:>10}{:>10}{:>10}"""

            if (counter % 25 == 0):
                    print template.format('instance',
                                          'zone',
                                          'time',
                                          'query',
                                          'insert',
                                          'update',
                                          'delete',
                                          'aconn',
                                          'cache_miss',
                                          'lock%',
                                          'queued',
                                          'active',
                                          'idxacc',
                                          'idxhit',
                                          'idxmiss',
                                          'idx%')

            if counter != 0:
                print template.format(instance,
                                      zone,
                                      self.thetime(),
                                      (queries-prior_queries)/self.sleep_interval,
                                      (inserts-prior_inserts)/self.sleep_interval,
                                      (updates-prior_updates)/self.sleep_interval,
                                      (deletes-prior_deletes)/self.sleep_interval,
                                      connections,
                                      diff_memory_misses/self.sleep_interval,
                                      lock_percent,
                                      lock_total,
                                      lock_active_total,
                                      (index_accesses-prior_index_accesses)/self.sleep_interval,
                                      (index_hits-prior_index_hits)/self.sleep_interval,
                                      (index_misses-prior_index_misses)/self.sleep_interval,
                                      index_miss_percent)

            counter += 1
            time.sleep(self.sleep_interval)


def main():
    # get command line input
    parser = argparse.ArgumentParser(description='ObjectRocket stat utility. See www.objectrocket.com for an account.')

    parser.add_argument('-a',
                        '--api_key',
                        dest='api_key',
                        required=True,
                        help='ObjectRocket API key.')

    parser.add_argument('-H',
                        '--hostname',
                        dest='api_server',
                        default='api.objectrocket.com',
                        metavar='HOSTNAME',
                        help='hostname to connect to.')

    parser.add_argument('-C',
                        '--check-interval',
                        dest='check_interval',
                        default='1',
                        type=int,
                        choices=(1, 5, 10, 15, 30, 60),
                        metavar='CHECKINTERVAL',
                        help='how often to poll for data')

    args = parser.parse_args()

    signal.signal(signal.SIGINT, lambda signum, frame: sys.exit())
    rocketstat = RocketStat(args.api_key, args.api_server,args.check_interval)
    rocketstat.printStats()


if __name__ == "__main__":
    main()
